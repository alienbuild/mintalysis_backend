generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model leaderboard {
  wallet            String? @db.Text
  token_count       Float?
  date              String? @db.Text
  sales             Float?
  purchases         Float?
  net_trade_balance Float?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model mints {
  id        BigInt?
  user      String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model mints_daily {
  date    DateTime @db.Date
  wallets Int
  items   Int

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model transfers {
  id        BigInt?
  from_user String? @db.Text
  to_user   String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@index([token_id], map: "token_id")
  @@ignore
}

model veve_transfers {
  id          Int       @id
  from_wallet String
  to_wallet   String
  timestamp   String?   @db.Text
  token_id    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  break_even  Float?
  entry_price Float?

  @@index([token_id, from_wallet, to_wallet])
}

model veve_wallets {
  id                  String       @id
  user_id             String?      @unique
  createdAt           DateTime     @default(now())
  updatedAt           DateTime?    @updatedAt
  veve_username       String?      @unique
  veve_id             String?
  active              Boolean?     @default(true)
  merged_to           String?
  tagsId              Int?
  first_activity_date DateTime?
  last_activity_date  DateTime?
  tags                wallet_tags? @relation(fields: [tagsId], references: [id])
  user                profile?     @relation(fields: [user_id], references: [user_id])

  @@index([user_id, veve_username])
  @@index([tagsId], map: "veve_wallets_tagsId_fkey")
}

model wallet_tags {
  id      Int            @id @default(autoincrement())
  name    String         @unique
  wallets veve_wallets[]
}

model veve_watchlist {
  id              String             @id @default(uuid())
  user_id         String
  collectible_id  String?
  unique_cover_id String?
  collectible     veve_collectibles? @relation(fields: [collectible_id], references: [collectible_id])
  comic           veve_comics?       @relation(fields: [unique_cover_id], references: [unique_cover_id])
  user            users              @relation(fields: [user_id], references: [id])

  @@index([collectible_id], map: "veve_watchlist_collectible_id_fkey")
  @@index([unique_cover_id], map: "veve_watchlist_unique_cover_id_fkey")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model transfers_daily {
  date      DateTime @db.Date
  transfers Int
  sellers   Int
  buyers    Int
  items     Int
  wallets   Int

  @@ignore
}

model users {
  id                     String                     @id @default(uuid())
  email                  String                     @unique
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  role                   Role                       @default(BASIC)
  username               String                     @unique
  name                   String?
  cover_image            String?
  avatar                 String?
  last_seen              DateTime?                  @default(now())
  status                 UserStatus                 @default(ACTIVE)
  activated              Boolean                    @default(false)
  stripe_customer_id     String?
  ecomiwiki_user         Boolean?                   @default(false)
  onboarded              Boolean                    @default(false)
  profile                profile?
  viewed_profile         Int?
  impressions            Int?
  followers              follows[]                  @relation("following")
  following              follows[]                  @relation("follower")
  veve_watchlist         veve_watchlist[]
  projects               projects[]
  conversations          conversation_participant[]
  messages               message[]
  conversation           conversation[]
  communities            communities[]              @relation("member")
  communities_created    communities[]              @relation("creator")
  posts                  posts[]
  community_posts        community_posts[]
  likes_posts            posts[]                    @relation("likes_posts")
  likes_community_posts  community_posts[]          @relation("likes_community_posts")
  likes_comments         comments[]                 @relation("likes_comments")
  comments               comments[]
  from_notifications     notifications[]            @relation("from_notifications")
  to_notifications       notifications[]            @relation("to_notifications")
  invited_in_communities communities[]              @relation("users_communities_invites")
  tagged_in_posts        posts[]                    @relation("users_posts_tag")
  login_history          login_history[]            @relation("user_login_history")

  @@index([email], map: "email")
  @@index([username], map: "username")
  @@index([stripe_customer_id], map: "stripe_customer_id")
}

model login_history {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  browser    String?
  ip_address String
  user       users    @relation("user_login_history", fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
}

model notifications {
  id           String           @id @default(uuid())
  type         NotificationType
  content      String
  createdAt    DateTime         @default(now())
  from_user    users?           @relation(name: "from_notifications", fields: [from_user_id], references: [id], onDelete: Cascade)
  from_user_id String?
  to_user      users?           @relation(name: "to_notifications", fields: [to_user_id], references: [id], onDelete: Cascade)
  to_user_id   String?
}

model communities {
  id                  String             @id @default(uuid())
  name                String             @unique
  slug                String             @unique
  type                CommunityPrivacy   @default(PUBLIC)
  image               String?
  cover_image         String?
  creator_id          String
  creator             users              @relation("creator", fields: [creator_id], references: [id])
  member_count        Int?
  members             users[]            @relation("member")
  project_id          String?
  project             projects?          @relation(fields: [project_id], references: [id])
  posts               posts[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  comments            comments[]
  invited_users       users[]            @relation("users_communities_invites")
  gate_key            String?
  veve_collectible_id String?
  veve_collectible    veve_collectibles? @relation(fields: [veve_collectible_id], references: [collectible_id])
  veve_comic_id       String?
  veve_comic          veve_comics?       @relation(fields: [veve_comic_id], references: [unique_cover_id])
  utilities           utilities[]
  community_posts     community_posts[]
}

model utilities {
  id           String       @id @default(uuid())
  title        String?
  body         String?
  value        Int?
  community_id String?
  community    communities? @relation(fields: [community_id], references: [id])
}

model posts {
  id                  String           @id @default(uuid())
  audience            PostAudienceEnum @default(PUBLIC)
  author_id           String?
  author              users?           @relation(fields: [author_id], references: [id])
  community_id        String?
  community           communities?     @relation(fields: [community_id], references: [id])
  body                String?
  image_url           String?
  community_image_url String?
  like_count          Int?
  comment_count       Int?
  liked_by            users[]          @relation("likes_posts")
  comments            comments[]
  tagged_users        users[]          @relation("users_posts_tag")
  createdAt           DateTime         @default(now())
}

model community_posts {
  id                  String      @id @default(uuid())
  author_id           String
  author              users       @relation(fields: [author_id], references: [id])
  community_id        String
  community           communities @relation(fields: [community_id], references: [id])
  content             String?
  image_url           String?
  community_image_url String?
  comment_count       Int?
  like_count          Int?
  liked_by            users[]     @relation("likes_community_posts")
  comments            comments[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model comments {
  id                String           @id @default(uuid())
  author_id         String
  author            users            @relation(fields: [author_id], references: [id])
  post_id           String
  post              posts            @relation(fields: [post_id], references: [id])
  community_id      String
  community         communities      @relation(fields: [community_id], references: [id])
  body              String?
  like_count        Int?
  liked_by          users[]          @relation("likes_comments")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  children          comments[]       @relation("comment_children")
  parent            comments?        @relation("comment_children", fields: [parent_id], references: [id])
  parent_id         String?
  community_posts   community_posts? @relation(fields: [community_postsId], references: [id])
  community_postsId String?
}

model follows {
  follower    users  @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   users  @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model profile {
  id                   Int           @id @default(autoincrement())
  bio                  String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  onboarded            Boolean       @default(false)
  veve_wallet_imported Boolean       @default(false)
  veve_wallet_address  String?
  user_id              String        @unique
  user                 users         @relation(fields: [user_id], references: [id])
  veve_wallet          veve_wallets?
}

model conversation {
  id                String                     @id @default(uuid())
  createdAt         DateTime                   @default(now())
  owner_id          String?
  owner             users?                     @relation(fields: [owner_id], references: [id])
  updatedAt         DateTime                   @updatedAt
  latest_message_id String?                    @unique
  latest_message    message?                   @relation(name: "latest_conversation_message", fields: [latest_message_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  participants      conversation_participant[]
  messages          message[]

  @@index([latest_message_id], map: "latest_message_id")
}

model conversation_participant {
  id                      String       @id @default(uuid())
  user_id                 String
  user                    users        @relation(fields: [user_id], references: [id])
  conversation_id         String
  conversation            conversation @relation(fields: [conversation_id], references: [id])
  createdAt               DateTime     @default(now())
  has_seen_latest_message Boolean
  updatedAt               DateTime     @updatedAt

  @@index([has_seen_latest_message], map: "has_seen_latest_message")
}

model message {
  id             String        @id @default(uuid())
  type           MessageType   @default(TEXT)
  conversationId String
  conversation   conversation  @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         users         @relation(fields: [senderId], references: [id])
  is_latest_in   conversation? @relation(name: "latest_conversation_message")
  body           String        @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         MessageStatus @default(SENT)
  offer          offers[]
}

model offers {
  id            String   @id @default(uuid())
  offer         Decimal? @db.Decimal(10, 2)
  offerAccepted Boolean? @default(false)
  message       message? @relation(fields: [messageId], references: [id])
  messageId     String?
}

model projects {
  id          String        @id @default(uuid())
  name        String?       @unique
  abbr        String?       @unique
  slug        String?       @unique
  active      Boolean       @default(false)
  icon        String?
  users       users[]
  communities communities[]
}

model veve_comics {
  unique_cover_id           String           @id
  comic_id                  String?
  name                      String
  rarity                    String?
  description               String?          @db.Text
  comic_series_id           String?
  drop_date                 DateTime?
  store_price               Decimal?         @db.Decimal(10, 2)
  publisher_id              String?
  market_fee                Decimal?         @db.Decimal(10, 3)
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  all_time_high             Decimal?         @db.Decimal(10, 2)
  all_time_low              Decimal?         @db.Decimal(10, 2)
  comic_number              Int?
  drop_method               String?
  floor_price               Decimal?         @db.Decimal(10, 2)
  is_free                   Boolean?         @default(false)
  is_unlimited              Boolean?         @default(false)
  market_cap                Decimal?         @db.Decimal(10, 2)
  one_day_change            Decimal?         @db.Decimal(10, 2)
  one_mo_change             Decimal?         @db.Decimal(10, 2)
  one_wk_change             Decimal?         @db.Decimal(10, 2)
  one_year_change           Decimal?         @db.Decimal(10, 2)
  page_count                Int?
  six_mo_change             Decimal?         @db.Decimal(10, 2)
  start_year                Int?
  three_mo_change           Decimal?         @db.Decimal(10, 2)
  total_available           Int?
  total_issued              Int?
  total_listings            Int?
  image_direction           String?
  image_full_resolution_url String?
  image_high_resolution_url String?
  image_low_resolution_url  String?
  image_med_resolution_url  String?
  image_thumbnail           String?
  all_time_change           Decimal?         @db.Decimal(10, 2)
  slug                      String?          @unique
  unique_holders            BigInt?
  veve_watchlist            veve_watchlist[]
  artists                   artists[]
  characters                characters[]
  writers                   writers[]
  communities               communities[]

  @@index([unique_cover_id], map: "unique_cover_id")
}

model writers {
  author_id   String        @id
  name        String
  slug        String?       @unique
  veve_comics veve_comics[]
}

model artists {
  artist_id   String        @id
  name        String
  slug        String?       @unique
  veve_comics veve_comics[]
}

model characters {
  character_id String        @id
  name         String
  slug         String?       @unique
  veve_comics  veve_comics[]
}

model veve_publishers {
  id             Int      @id @default(autoincrement())
  publisher_id   String   @unique
  publisher_name String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([publisher_id], map: "publisher_id")
}

model veve_tokens {
  token_id          Int                 @id
  edition           Int?
  mint_date         DateTime?
  rarity            String?             @db.Text
  collectible_id    String?
  unique_cover_id   String?
  type              String?             @db.Text
  last_updated      DateTime?           @default(now()) @db.Timestamp(0)
  brand_id          String?
  licensor_id       String?
  series_id         String?
  wallet_id         String?
  element_id        String?
  brand             veve_brands?        @relation(fields: [brand_id], references: [brand_id])
  licensor          veve_licensors?     @relation(fields: [licensor_id], references: [licensor_id])
  series            veve_series?        @relation(fields: [series_id], references: [series_id])
  veve_collectibles veve_collectibles[]

  @@index([token_id])
  @@index([wallet_id])
  @@index([brand_id], map: "veve_tokens_brand_id_fkey")
  @@index([licensor_id], map: "veve_tokens_licensor_id_fkey")
  @@index([series_id], map: "veve_tokens_series_id_fkey")
}

model veve_collectibles {
  collectible_id                       String           @id
  name                                 String?
  rarity                               String?
  description                          String?          @db.Text
  edition_type                         String?
  store_price                          Decimal?         @db.Decimal(10, 2)
  drop_date                            DateTime?
  market_fee                           Decimal?         @db.Decimal(10, 3)
  createdAt                            DateTime         @default(now())
  updatedAt                            DateTime?
  background_image_direction           String?
  background_image_full_resolution_url String?
  background_image_high_resolution_url String?
  background_image_low_resolution_url  String?
  background_image_med_resolution_url  String?
  background_image_thumbnail_url       String?
  background_image_url                 String?
  image_direction                      String?
  image_full_resolution_url            String?
  image_high_resolution_url            String?
  image_low_resolution_url             String?
  image_med_resolution_url             String?
  image_thumbnail_url                  String?
  image_url                            String?
  is_unlimited                         Boolean?         @default(false)
  total_available                      Int?
  total_issued                         Int?
  total_likes                          Int?
  variety                              String?
  brand_id                             String?
  licensor_id                          String?
  series_id                            String?
  drop_method                          String?
  is_free                              Boolean?         @default(false)
  total_store_allocation               Int?
  all_time_high                        Decimal?         @db.Decimal(10, 2)
  all_time_low                         Decimal?         @db.Decimal(10, 2)
  floor_price                          Decimal?         @db.Decimal(10, 2)
  market_cap                           Decimal?         @db.Decimal(10, 2)
  one_day_change                       Decimal?         @db.Decimal(10, 2)
  one_mo_change                        Decimal?         @db.Decimal(10, 2)
  one_wk_change                        Decimal?         @db.Decimal(10, 2)
  one_year_change                      Decimal?         @db.Decimal(10, 2)
  six_mo_change                        Decimal?         @db.Decimal(10, 2)
  three_mo_change                      Decimal?         @db.Decimal(10, 2)
  total_listings                       Int?
  all_time_change                      Decimal?         @db.Decimal(10, 2)
  slug                                 String?          @unique
  unique_holders                       BigInt?
  series                               veve_series?     @relation(fields: [series_id], references: [series_id])
  veve_watchlist                       veve_watchlist[]
  veve_tokens                          veve_tokens[]
  communities                          communities[]

  @@index([brand_id], map: "collectibles_brand_id_fkey")
  @@index([licensor_id], map: "collectibles_licensor_id_fkey")
  @@index([name], map: "collectibles_name_idx")
  @@index([series_id], map: "collectibles_series_id_fkey")
}

model veve_brands {
  brand_id                                   String        @id
  name                                       String?
  description                                String?       @db.Text
  theme_logo_image_url                       String?
  theme_logo_image_thumbnail_url             String?
  theme_logo_image_low_resolution_url        String?
  theme_logo_image_med_resolution_url        String?
  theme_logo_image_full_resolution_url       String?
  theme_logo_image_high_resolution_url       String?
  theme_logo_image_direction                 String?
  theme_background_image_url                 String?
  theme_background_image_thumbnail_url       String?
  theme_background_image_low_resolution_url  String?
  theme_background_image_med_resolution_url  String?
  theme_background_image_full_resolution_url String?
  theme_background_image_high_resolution_url String?
  theme_background_image_direction           String?
  theme_footer_image_url                     String?
  theme_footer_image_thumbnail_url           String?
  theme_footer_image_low_resolution_url      String?
  theme_footer_image_med_resolution_url      String?
  theme_footer_image_full_resolution_url     String?
  theme_footer_image_high_resolution_url     String?
  theme_footer_image_direction               String?
  landscape_image_url                        String?
  landscape_image_thumbnail_url              String?
  landscape_image_low_resolution_url         String?
  landscape_image_med_resolution_url         String?
  landscape_image_full_resolution_url        String?
  landscape_image_high_resolution_url        String?
  landscape_image_direction                  String?
  square_image_url                           String?
  square_image_thumbnail_url                 String?
  square_image_low_resolution_url            String?
  square_image_med_resolution_url            String?
  square_image_full_resolution_url           String?
  square_image_high_resolution_url           String?
  square_image_direction                     String?
  licensor_id                                String
  slug                                       String?       @unique
  market_cap                                 Decimal?      @db.Decimal(10, 2)
  veve_tokens                                veve_tokens[]

  @@index([licensor_id], map: "brands_licensor_id_fkey")
}

model veve_licensors {
  licensor_id                                String        @id
  name                                       String?
  description                                String?       @db.Text
  landscape_image_direction                  String?
  landscape_image_full_resolution_url        String?
  landscape_image_high_resolution_url        String?
  landscape_image_low_resolution_url         String?
  landscape_image_med_resolution_url         String?
  landscape_image_thumbnail_url              String?
  landscape_image_url                        String?
  market_fee                                 Decimal?      @db.Decimal(10, 3)
  square_image_direction                     String?
  square_image_full_resolution_url           String?
  square_image_high_resolution_url           String?
  square_image_low_resolution_url            String?
  square_image_med_resolution_url            String?
  square_image_thumbnail_url                 String?
  square_image_url                           String?
  theme_background_image_direction           String?
  theme_background_image_full_resolution_url String?
  theme_background_image_high_resolution_url String?
  theme_background_image_low_resolution_url  String?
  theme_background_image_med_resolution_url  String?
  theme_background_image_thumbnail_url       String?
  theme_background_image_url                 String?
  theme_footer_image_direction               String?
  theme_footer_image_full_resolution_url     String?
  theme_footer_image_high_resolution_url     String?
  theme_footer_image_low_resolution_url      String?
  theme_footer_image_med_resolution_url      String?
  theme_footer_image_thumbnail_url           String?
  theme_footer_image_url                     String?
  theme_logo_image_direction                 String?
  theme_logo_image_full_resolution_url       String?
  theme_logo_image_high_resolution_url       String?
  theme_logo_image_low_resolution_url        String?
  theme_logo_image_med_resolution_url        String?
  theme_logo_image_thumbnail_url             String?
  theme_logo_image_url                       String?
  slug                                       String?       @unique
  market_cap                                 Decimal?      @db.Decimal(10, 2)
  veve_tokens                                veve_tokens[]
}

model veve_series {
  series_id                                  String              @id
  name                                       String?
  description                                String?             @db.Text
  season                                     Int?
  is_blindbox                                Boolean?            @default(false)
  theme_logo_image_url                       String?
  theme_logo_image_thumbnail_url             String?
  theme_logo_image_low_resolution_url        String?
  theme_logo_image_med_resolution_url        String?
  theme_logo_image_full_resolution_url       String?
  theme_logo_image_high_resolution_url       String?
  theme_logo_image_direction                 String?
  theme_background_image_url                 String?
  theme_background_image_thumbnail_url       String?
  theme_background_image_low_resolution_url  String?
  theme_background_image_med_resolution_url  String?
  theme_background_image_full_resolution_url String?
  theme_background_image_high_resolution_url String?
  theme_background_image_direction           String?
  theme_footer_image_url                     String?
  theme_footer_image_thumbnail_url           String?
  theme_footer_image_low_resolution_url      String?
  theme_footer_image_med_resolution_url      String?
  theme_footer_image_full_resolution_url     String?
  theme_footer_image_high_resolution_url     String?
  theme_footer_image_direction               String?
  landscape_image_url                        String?
  landscape_image_thumbnail_url              String?
  landscape_image_low_resolution_url         String?
  landscape_image_med_resolution_url         String?
  landscape_image_full_resolution_url        String?
  landscape_image_high_resolution_url        String?
  landscape_image_direction                  String?
  square_image_url                           String?
  square_image_thumbnail_url                 String?
  square_image_low_resolution_url            String?
  square_image_med_resolution_url            String?
  square_image_full_resolution_url           String?
  square_image_high_resolution_url           String?
  square_image_direction                     String?
  licensor_id                                String
  brand_id                                   String
  slug                                       String?             @unique
  market_cap                                 Decimal?            @db.Decimal(10, 2)
  veve_collectibles                          veve_collectibles[]
  veve_tokens                                veve_tokens[]

  @@index([brand_id], map: "series_brand_id_fkey")
  @@index([licensor_id], map: "series_licensor_id_fkey")
}

model odb_tokens {
  token_id        BigInt    @id
  unique_cover_id String?   @db.VarChar(255)
  type            String?   @db.VarChar(255)
  collectible_id  String?   @db.VarChar(255)
  name            String?   @db.VarChar(255)
  description     String?   @db.Text
  rarity          String?   @db.VarChar(255)
  edition_type    String?   @db.VarChar(10)
  edition         Int?
  total_editions  Int?
  mint_date       DateTime
  drop_date       DateTime? @db.DateTime(0)
  comic_number    Int?
  image_url       String?   @db.Text
  start_year      Int?
  cover_artists   String?   @db.Text
  artists         String?   @db.Text
  writers         String?   @db.Text
  characters      String?   @db.Text
  publisher_name  String?   @db.Text
  series_name     String?   @db.Text
  brand_name      String?   @db.Text
  licensor_name   String?   @db.Text
  last_updated    DateTime? @db.DateTime(0)
  created_at      DateTime? @db.DateTime(0)
  to_process      Int?      @db.TinyInt
  licensor_id     String?   @db.VarChar(255)
  brand_id        String?   @db.VarChar(255)
  series_id       String?   @db.VarChar(255)

  @@index([edition], map: "edition")
  @@index([last_updated], map: "last_updated")
  @@index([name], map: "name")
}

model veve_mints {
  id        Int       @id
  wallet_id String?
  timestamp String?   @db.Text
  token_id  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([wallet_id])
}

model imx_stats {
  project_id          String @unique
  token_count         Int
  wallet_count        Int
  transaction_count   Int
  unique_owners_count Int
}

model tmp_wallet_first_last_active {
  wallet       String   @id @db.VarChar(255)
  first_active DateTime
  last_active  DateTime

  @@map("_tmp_wallet_first_last_active")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp_wallet_merges {
  date        DateTime @db.DateTime(0)
  from_wallet String   @db.VarChar(255)
  to_wallet   String   @db.VarChar(255)

  @@map("_tmp_wallet_merges")
  @@ignore
}

enum Role {
  BASIC
  ADMIN
}

enum MessageType {
  TEXT
  IMAGE
  OFFER
}

enum NotificationType {
  POST
  FOLLOWER
  COMMUNITY
  OFFER
}

enum CommunityPrivacy {
  PUBLIC
  PRIVATE
  HODLERS
}

enum MessageStatus {
  SENT
  RECEIVED
  SEEN
}

enum UserStatus {
  ACTIVE
  IDLE
  LOGOUT
}

enum PostAudienceEnum {
  PUBLIC
  ONLY_ME
  SPECIFIC
}
