generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model tmp_tokens_wallet_id {
  token_id          Int     @id
  current_wallet_id String?

  @@map("_tmp_tokens_wallet_id")
}

model tmp_wallet_first_last_active {
  wallet       String   @id @db.VarChar(255)
  first_active DateTime
  last_active  DateTime

  @@map("_tmp_wallet_first_last_active")
}

model tmp_wallet_first_last_active2 {
  wallet_id    String    @id
  first_active DateTime?
  last_active  DateTime?

  @@map("_tmp_wallet_first_last_active2")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp_wallet_merges {
  date        DateTime @db.DateTime(0)
  from_wallet String   @db.VarChar(255)
  to_wallet   String   @db.VarChar(255)

  @@map("_tmp_wallet_merges")
  @@ignore
}

model artists {
  artist_id   String        @id
  name        String
  slug        String?       @unique
  veve_comics veve_comics[]
}

model characters {
  character_id String        @id
  name         String
  slug         String?       @unique
  veve_comics  veve_comics[]
}

model comments {
  id                    String           @id
  author_id             String
  post_id               String
  community_id          String
  body                  String?
  like_count            Int?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime
  parent_id             String?
  community_postsId     String?
  users_commentsTousers users            @relation(fields: [author_id], references: [id])
  communities           communities      @relation(fields: [community_id], references: [id])
  community_posts       community_posts? @relation(fields: [community_postsId], references: [id])
  comments              comments?        @relation("commentsTocomments", fields: [parent_id], references: [id])
  posts                 posts            @relation(fields: [post_id], references: [id])
  other_comments        comments[]       @relation("commentsTocomments")
  users_likes_comments  users[]          @relation("likes_comments")

  @@index([author_id], map: "comments_author_id_fkey")
  @@index([community_id], map: "comments_community_id_fkey")
  @@index([community_postsId], map: "comments_community_postsId_fkey")
  @@index([parent_id], map: "comments_parent_id_fkey")
  @@index([post_id], map: "comments_post_id_fkey")
}

model communities {
  id                              String             @id
  name                            String             @unique
  type                            communities_type   @default(PUBLIC)
  creator_id                      String
  member_count                    Int?
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime
  cover_image                     String?
  image                           String?
  slug                            String             @unique
  project_id                      String?
  veve_collectible_id             String?
  veve_comic_id                   String?
  gate_key                        String?
  users_communitiesTousers        users              @relation(fields: [creator_id], references: [id])
  projects                        projects?          @relation(fields: [project_id], references: [id])
  veve_collectibles               veve_collectibles? @relation(fields: [veve_collectible_id], references: [collectible_id])
  veve_comics                     veve_comics?       @relation(fields: [veve_comic_id], references: [unique_cover_id])
  comments                        comments[]
  community_posts                 community_posts[]
  posts                           posts[]
  utilities                       utilities[]
  users_member                    users[]            @relation("member")
  users_users_communities_invites users[]            @relation("users_communities_invites")

  @@index([creator_id], map: "communities_creator_id_fkey")
  @@index([project_id], map: "communities_project_id_fkey")
  @@index([veve_collectible_id], map: "communities_veve_collectible_id_fkey")
  @@index([veve_comic_id], map: "communities_veve_comic_id_fkey")
}

model community_posts {
  id                           String      @id
  author_id                    String
  community_id                 String
  content                      String?
  image_url                    String?
  community_image_url          String?
  comment_count                Int?
  like_count                   Int?
  createdAt                    DateTime    @default(now())
  updatedAt                    DateTime
  users_community_postsTousers users       @relation(fields: [author_id], references: [id])
  communities                  communities @relation(fields: [community_id], references: [id])
  comments                     comments[]
  users_likes_community_posts  users[]     @relation("likes_community_posts")

  @@index([author_id], map: "community_posts_author_id_fkey")
  @@index([community_id], map: "community_posts_community_id_fkey")
}

model conversation {
  id                                              String                     @id
  createdAt                                       DateTime                   @default(now())
  updatedAt                                       DateTime
  latest_message_id                               String?                    @unique
  owner_id                                        String?
  message_conversation_latest_message_idTomessage message?                   @relation("conversation_latest_message_idTomessage", fields: [latest_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                                           users?                     @relation(fields: [owner_id], references: [id])
  conversation_participant                        conversation_participant[]
  message_conversationTomessage_conversationId    message[]                  @relation("conversationTomessage_conversationId")

  @@index([owner_id], map: "conversation_owner_id_fkey")
  @@index([latest_message_id], map: "latest_message_id")
}

model conversation_participant {
  id                      String       @id
  user_id                 String
  conversation_id         String
  createdAt               DateTime     @default(now())
  has_seen_latest_message Boolean
  updatedAt               DateTime
  conversation            conversation @relation(fields: [conversation_id], references: [id])
  users                   users        @relation(fields: [user_id], references: [id])

  @@index([conversation_id], map: "conversation_participant_conversation_id_fkey")
  @@index([user_id], map: "conversation_participant_user_id_fkey")
  @@index([has_seen_latest_message], map: "has_seen_latest_message")
}

model follows {
  followerId                       String
  followingId                      String
  users_follows_followerIdTousers  users  @relation("follows_followerIdTousers", fields: [followerId], references: [id])
  users_follows_followingIdTousers users  @relation("follows_followingIdTousers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followingId], map: "follows_followingId_fkey")
}

model hro_mints {
  id        Int       @id
  wallet_id String?
  timestamp String?   @db.Text
  token_id  String?   @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@index([wallet_id], map: "veve_mints_wallet_id_idx")
}

model hro_transfers {
  id          Int       @id
  from_wallet String
  to_wallet   String
  timestamp   String?   @db.Text
  token_id    String?   @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  break_even  Float?
  entry_price Float?

  @@index([token_id, from_wallet, to_wallet], map: "veve_transfers_token_id_from_wallet_to_wallet_idx")
}

model imx_stats {
  project_id          String @unique
  token_count         Int
  wallet_count        Int
  transaction_count   Int
  unique_owners_count Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model leaderboard {
  wallet            String? @db.Text
  token_count       Float?
  date              String? @db.Text
  sales             Float?
  purchases         Float?
  net_trade_balance Float?

  @@ignore
}

model login_history {
  id         String   @id
  createdAt  DateTime @default(now())
  browser    String?
  user_id    String
  ip_address String
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "login_history_user_id_fkey")
}

model message {
  id                                                   String         @id
  conversationId                                       String
  senderId                                             String
  body                                                 String         @db.Text
  createdAt                                            DateTime       @default(now())
  updatedAt                                            DateTime
  type                                                 message_type   @default(TEXT)
  status                                               message_status @default(SENT)
  conversation_conversationTomessage_conversationId    conversation   @relation("conversationTomessage_conversationId", fields: [conversationId], references: [id])
  users                                                users          @relation(fields: [senderId], references: [id])
  conversation_conversation_latest_message_idTomessage conversation?  @relation("conversation_latest_message_idTomessage")
  offers                                               offers[]

  @@index([conversationId], map: "message_conversationId_fkey")
  @@index([senderId], map: "message_senderId_fkey")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model mints {
  id        BigInt?
  user      String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model mints_daily {
  date    DateTime @db.Date
  wallets Int
  items   Int

  @@ignore
}

model notifications {
  id                                      String             @id
  type                                    notifications_type
  content                                 String
  createdAt                               DateTime           @default(now())
  from_user_id                            String?
  to_user_id                              String?
  users_notifications_from_user_idTousers users?             @relation("notifications_from_user_idTousers", fields: [from_user_id], references: [id], onDelete: Cascade)
  users_notifications_to_user_idTousers   users?             @relation("notifications_to_user_idTousers", fields: [to_user_id], references: [id], onDelete: Cascade)

  @@index([from_user_id], map: "notifications_from_user_id_fkey")
  @@index([to_user_id], map: "notifications_to_user_id_fkey")
}

model odb_tokens {
  token_id        BigInt    @id
  unique_cover_id String?   @db.VarChar(255)
  type            String?   @db.VarChar(255)
  collectible_id  String?   @db.VarChar(255)
  name            String?   @db.VarChar(255)
  description     String?   @db.Text
  rarity          String?   @db.VarChar(255)
  edition_type    String?   @db.VarChar(10)
  edition         Int?
  total_editions  Int?
  mint_date       DateTime
  drop_date       DateTime? @db.DateTime(0)
  comic_number    Int?
  image_url       String?   @db.Text
  start_year      Int?
  cover_artists   String?   @db.Text
  artists         String?   @db.Text
  writers         String?   @db.Text
  characters      String?   @db.Text
  publisher_name  String?   @db.Text
  series_name     String?   @db.Text
  brand_name      String?   @db.Text
  licensor_name   String?   @db.Text
  last_updated    DateTime? @db.DateTime(0)
  created_at      DateTime? @db.DateTime(0)
  to_process      Int?      @db.TinyInt
  licensor_id     String?   @db.VarChar(255)
  brand_id        String?   @db.VarChar(255)
  series_id       String?   @db.VarChar(255)

  @@index([edition], map: "edition")
  @@index([last_updated], map: "last_updated")
  @@index([name], map: "name")
}

model offers {
  id            String   @id
  offer         Decimal? @db.Decimal(10, 2)
  offerAccepted Boolean? @default(false)
  messageId     String?
  message       message? @relation(fields: [messageId], references: [id])

  @@index([messageId], map: "offers_messageId_fkey")
}

model poker_table {
  id                                                                     String                    @id
  host_id                                                                String?
  createdAt                                                              DateTime                  @default(now())
  updatedAt                                                              DateTime
  latest_message_id                                                      String?                   @unique
  community_cards                                                        String?                   @db.LongText
  status                                                                 poker_table_status        @default(WAITING)
  buy_in                                                                 Int                       @default(1000)
  current_round                                                          String?
  hand_number                                                            Int                       @default(0)
  deck                                                                   String?                   @db.LongText
  current_bet                                                            Int?
  current_position                                                       Int?
  last_position                                                          Int?
  users                                                                  users?                    @relation(fields: [host_id], references: [id])
  poker_table_message_poker_table_latest_message_idTopoker_table_message poker_table_message?      @relation("poker_table_latest_message_idTopoker_table_message", fields: [latest_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  poker_table_message_poker_tableTopoker_table_message_poker_table_id    poker_table_message[]     @relation("poker_tableTopoker_table_message_poker_table_id")
  poker_table_participant                                                poker_table_participant[]
  poker_table_pots                                                       poker_table_pots[]

  @@index([host_id], map: "poker_table_host_id_fkey")
}

model poker_table_message {
  id                                                             String                     @id
  poker_table_id                                                 String
  senderId                                                       String
  body                                                           String                     @db.Text
  createdAt                                                      DateTime                   @default(now())
  updatedAt                                                      DateTime
  type                                                           poker_table_message_type   @default(TEXT)
  status                                                         poker_table_message_status @default(SENT)
  poker_table_poker_tableTopoker_table_message_poker_table_id    poker_table                @relation("poker_tableTopoker_table_message_poker_table_id", fields: [poker_table_id], references: [id])
  users                                                          users                      @relation(fields: [senderId], references: [id])
  poker_table_poker_table_latest_message_idTopoker_table_message poker_table?               @relation("poker_table_latest_message_idTopoker_table_message")

  @@index([poker_table_id], map: "message_conversationId_fkey")
  @@index([senderId], map: "message_senderId_fkey")
}

model poker_table_participant {
  id                      String      @id
  seat                    Int         @default(1)
  action                  String?
  poker_table_id          String
  updatedAt               DateTime
  user_id                 String
  has_seen_latest_message Boolean
  bet                     Int?        @default(0)
  folded                  Boolean     @default(false)
  hole_cards              String?     @db.LongText
  show_cards              Boolean     @default(false)
  stack_size              Int?        @default(1000)
  left                    Boolean     @default(false)
  poker_table             poker_table @relation(fields: [poker_table_id], references: [id])
  users                   users       @relation(fields: [user_id], references: [id])

  @@index([poker_table_id], map: "poker_table_participant_poker_table_id_fkey")
  @@index([user_id], map: "poker_table_participant_user_id_fkey")
}

model poker_table_pots {
  id             String      @id
  poker_table_id String
  amount         Int         @default(0)
  poker_table    poker_table @relation(fields: [poker_table_id], references: [id])
  users          users[]

  @@index([poker_table_id], map: "poker_table_pots_poker_table_id_fkey")
}

model posts {
  id                    String         @id
  author_id             String?
  community_id          String?
  body                  String?
  image_url             String?
  community_image_url   String?
  comment_count         Int?
  like_count            Int?
  createdAt             DateTime       @default(now())
  audience              posts_audience @default(PUBLIC)
  users_postsTousers    users?         @relation(fields: [author_id], references: [id])
  communities           communities?   @relation(fields: [community_id], references: [id])
  comments              comments[]
  users_likes_posts     users[]        @relation("likes_posts")
  users_users_posts_tag users[]        @relation("users_posts_tag")

  @@index([author_id], map: "posts_author_id_fkey")
  @@index([community_id], map: "posts_community_id_fkey")
}

model profile {
  id                   Int                @id @default(autoincrement())
  bio                  String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  user_id              String             @unique
  onboarded            Boolean            @default(false)
  veve_wallet_imported Boolean            @default(false)
  veve_wallet_address  String?
  users                users              @relation(fields: [user_id], references: [id])
  veve_wallets         veve_wallets?
  mcfarlane_wallets    mcfarlane_wallets?
}

model projects {
  id          String        @id
  name        String?       @unique
  abbr        String?       @unique
  active      Boolean       @default(false)
  icon        String?
  slug        String?       @unique
  communities communities[]
  users       users[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model transfers {
  id        BigInt?
  from_user String? @db.Text
  to_user   String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@index([token_id], map: "token_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model transfers_daily {
  date      DateTime @db.Date
  transfers Int
  sellers   Int
  buyers    Int
  items     Int
  wallets   Int

  @@ignore
}

model users {
  id                                              String                     @id
  email                                           String                     @unique
  createdAt                                       DateTime                   @default(now())
  updatedAt                                       DateTime
  role                                            users_role                 @default(BASIC)
  username                                        String                     @unique
  avatar                                          String?
  last_seen                                       DateTime?                  @default(now())
  activated                                       Boolean                    @default(false)
  stripe_customer_id                              String?
  ecomiwiki_user                                  Boolean?                   @default(false)
  onboarded                                       Boolean                    @default(false)
  name                                            String?
  impressions                                     Int?
  viewed_profile                                  Int?
  cover_image                                     String?
  status                                          users_status               @default(ACTIVE)
  poker_table_potsId                              String?
  poker_table_pots                                poker_table_pots?          @relation(fields: [poker_table_potsId], references: [id])
  comments_commentsTousers                        comments[]
  communities_communitiesTousers                  communities[]
  community_posts_community_postsTousers          community_posts[]
  conversation                                    conversation[]
  conversation_participant                        conversation_participant[]
  follows_follows_followerIdTousers               follows[]                  @relation("follows_followerIdTousers")
  follows_follows_followingIdTousers              follows[]                  @relation("follows_followingIdTousers")
  login_history                                   login_history[]
  message                                         message[]
  notifications_notifications_from_user_idTousers notifications[]            @relation("notifications_from_user_idTousers")
  notifications_notifications_to_user_idTousers   notifications[]            @relation("notifications_to_user_idTousers")
  poker_table                                     poker_table[]
  poker_table_message                             poker_table_message[]
  poker_table_participant                         poker_table_participant[]
  posts_postsTousers                              posts[]
  profile                                         profile?
  veve_watchlist                                  veve_watchlist[]
  comments_likes_comments                         comments[]                 @relation("likes_comments")
  community_posts_likes_community_posts           community_posts[]          @relation("likes_community_posts")
  posts_likes_posts                               posts[]                    @relation("likes_posts")
  communities_member                              communities[]              @relation("member")
  projects                                        projects[]
  communities_users_communities_invites           communities[]              @relation("users_communities_invites")
  posts_users_posts_tag                           posts[]                    @relation("users_posts_tag")

  @@index([email], map: "email")
  @@index([stripe_customer_id], map: "stripe_customer_id")
  @@index([username], map: "username")
  @@index([poker_table_potsId], map: "users_poker_table_potsId_fkey")
}

model utilities {
  id           String       @id
  title        String?
  body         String?
  value        Int?
  community_id String?
  communities  communities? @relation(fields: [community_id], references: [id])

  @@index([community_id], map: "utilities_community_id_fkey")
}

model mcfarlane_brands {
  brand_id    String  @id
  name        String?
  description String? @db.Text
  slug        String? @unique
}

model mcfarlane_wallets {
  id                  String       @id
  user_id             String?      @unique
  mcfarlane_username  String?      @unique
  mcfarlane_id        String?
  tagsId              Int?
  first_activity_date DateTime?
  last_activity_date  DateTime?
  tags                wallet_tags? @relation(fields: [tagsId], references: [id])
  user                profile?     @relation(fields: [user_id], references: [user_id])
}

model mcfarlane_transfers {
  id          Int       @id
  from_wallet String
  to_wallet   String
  timestamp   String?   @db.Text
  token_id    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  break_even  Float?
  entry_price Float?

  @@index([token_id, from_wallet, to_wallet])
}

model veve_brands {
  brand_id                                   String        @id
  name                                       String?
  description                                String?       @db.Text
  theme_logo_image_url                       String?
  theme_logo_image_thumbnail_url             String?
  theme_logo_image_low_resolution_url        String?
  theme_logo_image_med_resolution_url        String?
  theme_logo_image_full_resolution_url       String?
  theme_logo_image_high_resolution_url       String?
  theme_logo_image_direction                 String?
  theme_background_image_url                 String?
  theme_background_image_thumbnail_url       String?
  theme_background_image_low_resolution_url  String?
  theme_background_image_med_resolution_url  String?
  theme_background_image_full_resolution_url String?
  theme_background_image_high_resolution_url String?
  theme_background_image_direction           String?
  theme_footer_image_url                     String?
  theme_footer_image_thumbnail_url           String?
  theme_footer_image_low_resolution_url      String?
  theme_footer_image_med_resolution_url      String?
  theme_footer_image_full_resolution_url     String?
  theme_footer_image_high_resolution_url     String?
  theme_footer_image_direction               String?
  landscape_image_url                        String?
  landscape_image_thumbnail_url              String?
  landscape_image_low_resolution_url         String?
  landscape_image_med_resolution_url         String?
  landscape_image_full_resolution_url        String?
  landscape_image_high_resolution_url        String?
  landscape_image_direction                  String?
  square_image_url                           String?
  square_image_thumbnail_url                 String?
  square_image_low_resolution_url            String?
  square_image_med_resolution_url            String?
  square_image_full_resolution_url           String?
  square_image_high_resolution_url           String?
  square_image_direction                     String?
  licensor_id                                String
  slug                                       String?       @unique
  market_cap                                 Decimal?      @db.Decimal(10, 2)
  sort                                       Int?
  veve_tokens                                veve_tokens[]

  @@index([licensor_id], map: "brands_licensor_id_fkey")
}

model veve_collectibles {
  collectible_id                       String           @id
  name                                 String?
  rarity                               String?
  description                          String?          @db.Text
  edition_type                         String?
  store_price                          Decimal?         @db.Decimal(10, 2)
  drop_date                            DateTime?
  market_fee                           Decimal?         @db.Decimal(10, 3)
  createdAt                            DateTime         @default(now())
  updatedAt                            DateTime?
  background_image_direction           String?
  background_image_full_resolution_url String?
  background_image_high_resolution_url String?
  background_image_low_resolution_url  String?
  background_image_med_resolution_url  String?
  background_image_thumbnail_url       String?
  background_image_url                 String?
  image_direction                      String?
  image_full_resolution_url            String?
  image_high_resolution_url            String?
  image_low_resolution_url             String?
  image_med_resolution_url             String?
  image_thumbnail_url                  String?
  image_url                            String?
  is_unlimited                         Boolean?         @default(false)
  total_available                      Int?
  total_issued                         Int?
  total_likes                          Int?
  variety                              String?
  brand_id                             String?
  licensor_id                          String?
  series_id                            String?
  drop_method                          String?
  is_free                              Boolean?         @default(false)
  total_store_allocation               Int?
  all_time_high                        Decimal?         @db.Decimal(10, 2)
  all_time_low                         Decimal?         @db.Decimal(10, 2)
  floor_price                          Decimal?         @db.Decimal(10, 2)
  market_cap                           Decimal?         @db.Decimal(10, 2)
  one_day_change                       Decimal?         @db.Decimal(10, 2)
  one_mo_change                        Decimal?         @db.Decimal(10, 2)
  one_wk_change                        Decimal?         @db.Decimal(10, 2)
  one_year_change                      Decimal?         @db.Decimal(10, 2)
  six_mo_change                        Decimal?         @db.Decimal(10, 2)
  three_mo_change                      Decimal?         @db.Decimal(10, 2)
  total_listings                       Int?
  all_time_change                      Decimal?         @db.Decimal(10, 2)
  slug                                 String?          @unique
  unique_holders                       BigInt?
  veve_series                          veve_series?     @relation(fields: [series_id], references: [series_id])
  communities                          communities[]
  veve_watchlist                       veve_watchlist[]
  veve_tokens                          veve_tokens[]

  @@index([brand_id], map: "collectibles_brand_id_fkey")
  @@index([licensor_id], map: "collectibles_licensor_id_fkey")
  @@index([name], map: "collectibles_name_idx")
  @@index([series_id], map: "collectibles_series_id_fkey")
}

model veve_comics {
  unique_cover_id           String           @id
  name                      String
  rarity                    String?
  description               String?          @db.Text
  comic_series_id           String?
  drop_date                 DateTime?
  store_price               Decimal?         @db.Decimal(10, 2)
  publisher_id              String?
  market_fee                Decimal?         @db.Decimal(10, 3)
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime
  all_time_high             Decimal?         @db.Decimal(10, 2)
  all_time_low              Decimal?         @db.Decimal(10, 2)
  comic_number              Int?
  drop_method               String?
  floor_price               Decimal?         @db.Decimal(10, 2)
  is_free                   Boolean?         @default(false)
  is_unlimited              Boolean?         @default(false)
  market_cap                Decimal?         @db.Decimal(10, 2)
  one_day_change            Decimal?         @db.Decimal(10, 2)
  one_mo_change             Decimal?         @db.Decimal(10, 2)
  one_wk_change             Decimal?         @db.Decimal(10, 2)
  one_year_change           Decimal?         @db.Decimal(10, 2)
  page_count                Int?
  six_mo_change             Decimal?         @db.Decimal(10, 2)
  start_year                Int?
  three_mo_change           Decimal?         @db.Decimal(10, 2)
  total_available           Int?
  total_issued              Int?
  total_listings            Int?
  image_direction           String?
  image_full_resolution_url String?
  image_high_resolution_url String?
  image_low_resolution_url  String?
  image_med_resolution_url  String?
  image_thumbnail           String?
  all_time_change           Decimal?         @db.Decimal(10, 2)
  slug                      String?          @unique
  comic_id                  String?
  unique_holders            BigInt?
  communities               communities[]
  veve_watchlist            veve_watchlist[]
  artists                   artists[]
  characters                characters[]
  writers                   writers[]

  @@index([unique_cover_id], map: "unique_cover_id")
}

model veve_licensors {
  licensor_id                                String        @id
  name                                       String?
  description                                String?       @db.Text
  landscape_image_direction                  String?
  landscape_image_full_resolution_url        String?
  landscape_image_high_resolution_url        String?
  landscape_image_low_resolution_url         String?
  landscape_image_med_resolution_url         String?
  landscape_image_thumbnail_url              String?
  landscape_image_url                        String?
  market_fee                                 Decimal?      @db.Decimal(10, 3)
  square_image_direction                     String?
  square_image_full_resolution_url           String?
  square_image_high_resolution_url           String?
  square_image_low_resolution_url            String?
  square_image_med_resolution_url            String?
  square_image_thumbnail_url                 String?
  square_image_url                           String?
  theme_background_image_direction           String?
  theme_background_image_full_resolution_url String?
  theme_background_image_high_resolution_url String?
  theme_background_image_low_resolution_url  String?
  theme_background_image_med_resolution_url  String?
  theme_background_image_thumbnail_url       String?
  theme_background_image_url                 String?
  theme_footer_image_direction               String?
  theme_footer_image_full_resolution_url     String?
  theme_footer_image_high_resolution_url     String?
  theme_footer_image_low_resolution_url      String?
  theme_footer_image_med_resolution_url      String?
  theme_footer_image_thumbnail_url           String?
  theme_footer_image_url                     String?
  theme_logo_image_direction                 String?
  theme_logo_image_full_resolution_url       String?
  theme_logo_image_high_resolution_url       String?
  theme_logo_image_low_resolution_url        String?
  theme_logo_image_med_resolution_url        String?
  theme_logo_image_thumbnail_url             String?
  theme_logo_image_url                       String?
  slug                                       String?       @unique
  market_cap                                 Decimal?      @db.Decimal(10, 2)
  veve_tokens                                veve_tokens[]
}

model veve_mints {
  id        Int       @id
  wallet_id String?
  timestamp String?   @db.Text
  token_id  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@index([wallet_id])
}

model veve_publishers {
  id             Int      @id @default(autoincrement())
  publisher_id   String   @unique
  publisher_name String
  createdAt      DateTime @default(now())
  updatedAt      DateTime

  @@index([publisher_id], map: "publisher_id")
}

model veve_series {
  series_id                                  String              @id
  name                                       String?
  description                                String?             @db.Text
  season                                     Int?
  is_blindbox                                Boolean?            @default(false)
  theme_logo_image_url                       String?
  theme_logo_image_thumbnail_url             String?
  theme_logo_image_low_resolution_url        String?
  theme_logo_image_med_resolution_url        String?
  theme_logo_image_full_resolution_url       String?
  theme_logo_image_high_resolution_url       String?
  theme_logo_image_direction                 String?
  theme_background_image_url                 String?
  theme_background_image_thumbnail_url       String?
  theme_background_image_low_resolution_url  String?
  theme_background_image_med_resolution_url  String?
  theme_background_image_full_resolution_url String?
  theme_background_image_high_resolution_url String?
  theme_background_image_direction           String?
  theme_footer_image_url                     String?
  theme_footer_image_thumbnail_url           String?
  theme_footer_image_low_resolution_url      String?
  theme_footer_image_med_resolution_url      String?
  theme_footer_image_full_resolution_url     String?
  theme_footer_image_high_resolution_url     String?
  theme_footer_image_direction               String?
  landscape_image_url                        String?
  landscape_image_thumbnail_url              String?
  landscape_image_low_resolution_url         String?
  landscape_image_med_resolution_url         String?
  landscape_image_full_resolution_url        String?
  landscape_image_high_resolution_url        String?
  landscape_image_direction                  String?
  square_image_url                           String?
  square_image_thumbnail_url                 String?
  square_image_low_resolution_url            String?
  square_image_med_resolution_url            String?
  square_image_full_resolution_url           String?
  square_image_high_resolution_url           String?
  square_image_direction                     String?
  licensor_id                                String
  brand_id                                   String
  slug                                       String?             @unique
  market_cap                                 Decimal?            @db.Decimal(10, 2)
  veve_collectibles                          veve_collectibles[]
  veve_tokens                                veve_tokens[]

  @@index([brand_id], map: "series_brand_id_fkey")
  @@index([licensor_id], map: "series_licensor_id_fkey")
}

model veve_tokens {
  token_id          Int                 @id
  edition           Int?
  mint_date         DateTime?
  rarity            String?             @db.Text
  collectible_id    String?
  unique_cover_id   String?
  type              String?             @db.Text
  last_updated      DateTime?           @default(now()) @db.Timestamp(0)
  brand_id          String?
  licensor_id       String?
  series_id         String?
  wallet_id         String?
  element_id        String?
  veve_brands       veve_brands?        @relation(fields: [brand_id], references: [brand_id])
  veve_wallets      veve_wallets?       @relation(fields: [wallet_id], references: [id], map: "veve_tokens_ibfk_1")
  veve_licensors    veve_licensors?     @relation(fields: [licensor_id], references: [licensor_id])
  veve_series       veve_series?        @relation(fields: [series_id], references: [series_id])
  veve_collectibles veve_collectibles[]

  @@index([brand_id], map: "veve_tokens_brand_id_fkey")
  @@index([licensor_id], map: "veve_tokens_licensor_id_fkey")
  @@index([series_id], map: "veve_tokens_series_id_fkey")
  @@index([token_id])
  @@index([wallet_id])
}

model veve_transfers {
  id          Int       @id
  from_wallet String
  to_wallet   String
  timestamp   String?   @db.Text
  token_id    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  break_even  Float?
  entry_price Float?

  @@index([token_id, from_wallet, to_wallet])
}

model veve_wallets {
  id                  String        @id
  user_id             String?       @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime?
  veve_username       String?       @unique
  veve_id             String?
  active              Boolean?      @default(true)
  merged_to           String?
  tagsId              Int?
  first_activity_date DateTime?
  last_activity_date  DateTime?
  wallet_tags         wallet_tags?  @relation(fields: [tagsId], references: [id])
  profile             profile?      @relation(fields: [user_id], references: [user_id])
  veve_tokens         veve_tokens[]

  @@index([tagsId], map: "veve_wallets_tagsId_fkey")
  @@index([user_id, veve_username])
}

model veve_watchlist {
  id                String             @id
  user_id           String
  collectible_id    String?
  unique_cover_id   String?
  veve_collectibles veve_collectibles? @relation(fields: [collectible_id], references: [collectible_id])
  veve_comics       veve_comics?       @relation(fields: [unique_cover_id], references: [unique_cover_id])
  users             users              @relation(fields: [user_id], references: [id])

  @@index([collectible_id], map: "veve_watchlist_collectible_id_fkey")
  @@index([unique_cover_id], map: "veve_watchlist_unique_cover_id_fkey")
}

model wallet_tags {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  veve_wallets      veve_wallets[]
  mcfarlane_wallets mcfarlane_wallets[]
}

model writers {
  author_id   String        @id
  name        String
  slug        String?       @unique
  veve_comics veve_comics[]
}

enum notifications_type {
  POST
  FOLLOWER
  COMMUNITY
  OFFER
}

enum communities_type {
  PUBLIC
  PRIVATE
  HODLERS
}

enum users_role {
  BASIC
  ADMIN
}

enum poker_table_message_type {
  TEXT
  IMAGE
  OFFER
}

enum poker_table_status {
  WAITING
  IN_PROGRESS
  GAME_OVER
}

enum message_type {
  TEXT
  IMAGE
  OFFER
}

enum poker_table_message_status {
  SENT
  RECEIVED
  SEEN
}

enum message_status {
  SENT
  RECEIVED
  SEEN
}

enum posts_audience {
  PUBLIC
  ONLY_ME
  SPECIFIC
}

enum users_status {
  ACTIVE
  IDLE
  LOGOUT
}
